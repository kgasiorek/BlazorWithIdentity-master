@page "/manualweighting"
@using Microsoft.AspNetCore.SignalR.Client
@inject AWSC.SharedFramework.Services.ServiceModus modbus

<h3>Ważenie ręczne - sterowanie</h3>

<DxButton RenderStyle="ButtonRenderStyle.Info" Text="Zielone WJAZD" SizeMode="@SizeMode.Large" Click="@GreenEntry" />
<DxButton RenderStyle="ButtonRenderStyle.Info" Text="Czerwone WJAZD" SizeMode="@SizeMode.Large" Click="@RedEntry" />

<DxPopup HeaderText="Udało się"
         @bind-Visible="@SuccessPopupVisible">
    <Content>
        <p>
            Operacja wykonana prawidłowo.
        </p>
    </Content>
    <FooterTemplate>
        <button class="btn btn-primary" @onclick="@(() => SuccessPopupVisible = false)">OK!</button>
    </FooterTemplate>
</DxPopup>

@code {
    private static readonly int entry = 18, exit = 19, weightingPossibility = 22;
    bool SuccessPopupVisible = false;

    protected override void OnInitialized()
    {
        modbus.EstablishConnection();
        CheckIsWeightingPossibilityClosed();
    }

    private void GreenEntry()
    {
        SuccessPopupVisible = true;
        Console.WriteLine(entry.ToString());
        SetLightColorToGreen(entry);
    }

    private void RedEntry()
    {
        SetLightColorToRed(entry);
    }


    private void CheckIsWeightingPossibilityClosed()
    {
        if (IsWeightingPossibilityClosed())
        {

        }
        else
        {

        }
    }

    #region Sterowanie
    private void SetLightColorToGreen(int whichSideOfWeight)
    {
        modbus.ChangeLightColor(whichSideOfWeight, true);
    }

    private void SetLightColorToRed(int whichSideOfWeight)
    {
        modbus.ChangeLightColor(whichSideOfWeight, false);
    }

    private bool EntrySensorIsDisturbed()
    {
        return modbus.EntrySensorStatus();
    }

    private bool IsWeightingPossibilityClosed()
    {
        return modbus.WeightingPossibilityStatus();
    }

    private bool ExitSensorIsDisturbed()
    {
        return modbus.ExitSensorStatus();
    }

    private void WhileEntrySensorIsDisturbed(bool isDisturbed)
    {
        if (isDisturbed)
        {
            while (!EntrySensorIsDisturbed())
            {

            }
        }
        else
        {
            while (EntrySensorIsDisturbed())
            {

            }
        }

    }

    private void WhileExitSensorIsDisturbed(bool isDisturbed)
    {
        if (isDisturbed)
        {
            while (!ExitSensorIsDisturbed())
            {

            }
        }
        else
        {
            while (ExitSensorIsDisturbed())
            {

            }
        }
    }


    private void nLogConfig()
    {
        //var config = new NLog.Config.LoggingConfiguration();

        // Targets where to log to: File and Console
        //var logfile = new NLog.Targets.FileTarget("logfile") { FileName = @"d:\logi\file.txt" };
        //var logconsole = new NLog.Targets.ConsoleTarget("logconsole");

        // Rules for mapping loggers to targets
        //config.AddRule(LogLevel.Info, LogLevel.Fatal, logconsole);
        //config.AddRule(LogLevel.Debug, LogLevel.Fatal, logfile);
        //LogManager.Configuration = config;
    }
    #endregion
}
}
